{"version":3,"sources":["Component/Forms/UpperText.jsx","Component/Loader/load.gif","Redux/Reducers/SaveUserReducer.js","Redux/Reducers/rootReducer.jsx","Redux/Saga/saga.js","Redux/Store.js","index.js"],"names":["UpperText","useState","text","setText","preview","setPreview","darkmode","setDarkMode","className","class","value","onChange","e","target","id","rows","placeholder","onClick","preventDefault","newText","toUpperCase","type","role","document","body","style","backgroundColor","for","split","length","trim","textAlign","initialState","Users","SaveUserReducer","state","action","payload","rootReducer","combineReducers","SaveUser","handleApi","Login","watchPostData","payloadId","url","fetch","method","JSON","stringify","headers","name","email","response","status","json","result","alert","statusText","put","console","log","finalData","all","takeLatest","sagaMiddleware","createSagaMiddleware","Store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.d87dd6a1.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst UpperText = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [preview, setPreview] = useState(false);\r\n  const [darkmode, setDarkMode] = useState(false);\r\n  const onChangeHandler = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const UperCaseHandler = (e) => {\r\n    e.preventDefault();\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const ResetHandler = (e) => {\r\n    setText(\"\");\r\n  };\r\n\r\n  const setPreviewHandler = () => {\r\n    setPreview(!preview);\r\n  };\r\n  const setModeHandler = () => {\r\n    setDarkMode(!darkmode);\r\n    if (!darkmode) {\r\n      document.body.style.backgroundColor = \"black\";\r\n    } else {\r\n      document.body.style.backgroundColor = \"white\";\r\n    }\r\n  };\r\n  return (\r\n    <div className={`container ${darkmode ? \"bg-dark text-white\" : \"\"}`}>\r\n      <h1 className=\"text-primary my-3\">Enter text for changing case !</h1>\r\n      <div class=\"mb-3\">\r\n        <textarea\r\n          value={text}\r\n          onChange={onChangeHandler}\r\n          class=\"form-control\"\r\n          id=\"Textarea1\"\r\n          rows=\"8\"\r\n          placeholder=\"Enter text\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary me-4\" onClick={UperCaseHandler}>\r\n        Change to UpperCase\r\n      </button>\r\n      <button className=\"btn btn-primary ms-3\" onClick={ResetHandler}>\r\n        Reset\r\n      </button>\r\n      <button className=\"btn btn-primary ms-3\" onClick={setPreviewHandler}>\r\n        Preview\r\n      </button>\r\n\r\n      \r\n\r\n      <div class=\"form-check form-switch my-3 ms-3\">\r\n        <input\r\n          class=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          role=\"switch\"\r\n          id=\"flexSwitchCheckDefault\"\r\n          onClick={setModeHandler}\r\n        />\r\n        <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">\r\n        {darkmode ? \"disable Darkmode\" : \"enable Darkmode\"}\r\n        </label>\r\n      </div>\r\n\r\n      <p className=\"text text-center\">\r\n        Number of words are\r\n        <i className=\" fw-bold text-primary\"> {text.split(\" \").length} </i> and\r\n        number of characters are\r\n        <i className=\" fw-bold text-primary\">{text.trim().length}</i>\r\n      </p>\r\n\r\n      {preview && (\r\n        <div className=\"row\">\r\n          <div\r\n            style={{ textAlign: \"justify\" }}\r\n            className=\"col-md-8 offset-2  border border- table-bordered opacity-75 \"\r\n          >\r\n            {text}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpperText;\r\n","export default __webpack_public_path__ + \"static/media/load.dbb22bcf.gif\";","const initialState = {\r\n  Users: [],\r\n};\r\n\r\nconst SaveUserReducer = (state = initialState, action) => {\r\n    \r\n  switch (action.type) {\r\n    case \"SAVE_USERS\":\r\n      return {\r\n          Users : [...action.payload]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default SaveUserReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport SaveUserReducer from \"./SaveUserReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    SaveUser :SaveUserReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { takeEvery, put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nfunction* handleApi({ type, payload }) {\r\n  let url;\r\n  try {\r\n    if (type == \"DELETE_DATA\" || type == \"PUT_DATA\") {\r\n      let payloadId;\r\n      type == \"PUT_DATA\" ? (payloadId = payload.id) : (payloadId = payload);\r\n\r\n      url = `https://61922ce9aeab5c0017105e0c.mockapi.io/UserData/${payloadId}`;\r\n    } else {\r\n      url = \"https://61922ce9aeab5c0017105e0c.mockapi.io/UserData\";\r\n    }\r\n    const response = yield fetch(\r\n      url,\r\n      type == \"POST_DATA\"\r\n        ? {\r\n            method: \"POST\",\r\n            body: JSON.stringify(payload),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n          }\r\n        : type == \"GET_DATA\"\r\n        ? { method: \"GET\" }\r\n        : type == \"DELETE_DATA\"\r\n        ? { method: \"DELETE\", headers: { \"Content-Type\": \"application/json\" } }\r\n        : {\r\n            method: \"PUT\",\r\n            body: JSON.stringify({ name: payload.name, email: payload.email }),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n          }\r\n    );\r\n\r\n    if (response.status == 201 ||response.status ==  200) {\r\n      const result = yield response.json();\r\n\r\n      if (type == \"POST_DATA\") {\r\n        alert(\"Succesfullly Submitted...!\", response.statusText);\r\n      } else if (type == \"GET_DATA\") {\r\n        yield put({ type: \"SAVE_USERS\", payload: result });\r\n      } else if (type == \"DELETE_DATA\") {\r\n        alert(\"Delted Succedfully..!!\");\r\n      } else {\r\n        alert(\"Updated Succesful..!!\");\r\n      }\r\n    } else {\r\n      alert(\"Errror is \", response.statusText);\r\n    }\r\n  } catch (err) {\r\n    console.log(\"Outside Catch Error\", err);\r\n  }\r\n}\r\n\r\nfunction* Login({ type, payload }) {\r\n  const { name, email } = payload;\r\n  console.log(\"inseide saga \" ,payload)\r\n  let url = `https://61922ce9aeab5c0017105e0c.mockapi.io/UserData/${email}`;\r\n  try {\r\n    const result = yield fetch(url, {\r\n      method: \"GET\",\r\n     \r\n    });\r\n\r\n    if(result.status == 201 ||result.status ==  200)\r\n    {\r\n      const finalData = yield result.json();\r\n      console.log(finalData);\r\n\r\n    }else{\r\n      alert(\"Email or Name doestn match\")\r\n      console.log(\"Data is\", result.statusText)\r\n    }\r\n    \r\n  } catch (err) {\r\n    console.log(\"Error Outside Cathc\", err);\r\n  }\r\n}\r\nexport function* watchPostData() {\r\n  //yield all([ all take lateste hits here ]) //this is for multiple hits for singles\r\n  // simple yeild takelates(\"POST_DATA\", fnToCalss)\r\n  yield all([\r\n    takeLatest(\"POST_DATA\", handleApi),\r\n    takeLatest(\"GET_DATA\", handleApi),\r\n    takeLatest(\"DELETE_DATA\", handleApi),\r\n    takeLatest(\"PUT_DATA\", handleApi),\r\n    takeLatest(\"LOGIN\", Login),\r\n  ]);\r\n}\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport rootReducer from \"./Reducers/rootReducer\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport { watchPostData } from \"./Saga/saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst Store = createStore(rootReducer,applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(watchPostData);\r\n\r\nexport default Store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as BrowserRouter} from \"react-router-dom\";\r\nimport App from './App';\r\nimport UpperText from './Component/Forms/UpperText';\r\nimport Store from './Redux/Store';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={Store}>\r\n      <BrowserRouter>\r\n    {/* <App /> */}\r\n    <UpperText/>\r\n    </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}